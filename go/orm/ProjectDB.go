// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongplanning/go/db"
	"github.com/fullstack-lang/gongplanning/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Project_sql sql.NullBool
var dummy_Project_time time.Duration
var dummy_Project_sort sort.Float64Slice

// ProjectAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model projectAPI
type ProjectAPI struct {
	gorm.Model

	models.Project_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ProjectPointersEncoding ProjectPointersEncoding
}

// ProjectPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ProjectPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Tasks is a slice of pointers to another Struct (optional or 0..1)
	Tasks IntSlice `gorm:"type:TEXT"`
}

// ProjectDB describes a project in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model projectDB
type ProjectDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field projectDB.Name
	Name_Data sql.NullString

	// Declation for basic field projectDB.IsExpanded
	// provide the sql storage for the boolan
	IsExpanded_Data sql.NullBool

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ProjectPointersEncoding
}

// ProjectDBs arrays projectDBs
// swagger:response projectDBsResponse
type ProjectDBs []ProjectDB

// ProjectDBResponse provides response
// swagger:response projectDBResponse
type ProjectDBResponse struct {
	ProjectDB
}

// ProjectWOP is a Project without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ProjectWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IsExpanded bool `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Project_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IsExpanded",
}

type BackRepoProjectStruct struct {
	// stores ProjectDB according to their gorm ID
	Map_ProjectDBID_ProjectDB map[uint]*ProjectDB

	// stores ProjectDB ID according to Project address
	Map_ProjectPtr_ProjectDBID map[*models.Project]uint

	// stores Project according to their gorm ID
	Map_ProjectDBID_ProjectPtr map[uint]*models.Project

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoProject *BackRepoProjectStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoProject.stage
	return
}

func (backRepoProject *BackRepoProjectStruct) GetDB() db.DBInterface {
	return backRepoProject.db
}

// GetProjectDBFromProjectPtr is a handy function to access the back repo instance from the stage instance
func (backRepoProject *BackRepoProjectStruct) GetProjectDBFromProjectPtr(project *models.Project) (projectDB *ProjectDB) {
	id := backRepoProject.Map_ProjectPtr_ProjectDBID[project]
	projectDB = backRepoProject.Map_ProjectDBID_ProjectDB[id]
	return
}

// BackRepoProject.CommitPhaseOne commits all staged instances of Project to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoProject *BackRepoProjectStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for project := range stage.Projects {
		backRepoProject.CommitPhaseOneInstance(project)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, project := range backRepoProject.Map_ProjectDBID_ProjectPtr {
		if _, ok := stage.Projects[project]; !ok {
			backRepoProject.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoProject.CommitDeleteInstance commits deletion of Project to the BackRepo
func (backRepoProject *BackRepoProjectStruct) CommitDeleteInstance(id uint) (Error error) {

	project := backRepoProject.Map_ProjectDBID_ProjectPtr[id]

	// project is not staged anymore, remove projectDB
	projectDB := backRepoProject.Map_ProjectDBID_ProjectDB[id]
	db, _ := backRepoProject.db.Unscoped()
	_, err := db.Delete(projectDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoProject.Map_ProjectPtr_ProjectDBID, project)
	delete(backRepoProject.Map_ProjectDBID_ProjectPtr, id)
	delete(backRepoProject.Map_ProjectDBID_ProjectDB, id)

	return
}

// BackRepoProject.CommitPhaseOneInstance commits project staged instances of Project to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoProject *BackRepoProjectStruct) CommitPhaseOneInstance(project *models.Project) (Error error) {

	// check if the project is not commited yet
	if _, ok := backRepoProject.Map_ProjectPtr_ProjectDBID[project]; ok {
		return
	}

	// initiate project
	var projectDB ProjectDB
	projectDB.CopyBasicFieldsFromProject(project)

	_, err := backRepoProject.db.Create(&projectDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoProject.Map_ProjectPtr_ProjectDBID[project] = projectDB.ID
	backRepoProject.Map_ProjectDBID_ProjectPtr[projectDB.ID] = project
	backRepoProject.Map_ProjectDBID_ProjectDB[projectDB.ID] = &projectDB

	return
}

// BackRepoProject.CommitPhaseTwo commits all staged instances of Project to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoProject *BackRepoProjectStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, project := range backRepoProject.Map_ProjectDBID_ProjectPtr {
		backRepoProject.CommitPhaseTwoInstance(backRepo, idx, project)
	}

	return
}

// BackRepoProject.CommitPhaseTwoInstance commits {{structname }} of models.Project to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoProject *BackRepoProjectStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, project *models.Project) (Error error) {

	// fetch matching projectDB
	if projectDB, ok := backRepoProject.Map_ProjectDBID_ProjectDB[idx]; ok {

		projectDB.CopyBasicFieldsFromProject(project)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		projectDB.ProjectPointersEncoding.Tasks = make([]int, 0)
		// 2. encode
		for _, taskAssocEnd := range project.Tasks {
			taskAssocEnd_DB :=
				backRepo.BackRepoTask.GetTaskDBFromTaskPtr(taskAssocEnd)
			
			// the stage might be inconsistant, meaning that the taskAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if taskAssocEnd_DB == nil {
				continue
			}
			
			projectDB.ProjectPointersEncoding.Tasks =
				append(projectDB.ProjectPointersEncoding.Tasks, int(taskAssocEnd_DB.ID))
		}

		_, err := backRepoProject.db.Save(projectDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Project intance %s", project.Name))
		return err
	}

	return
}

// BackRepoProject.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoProject *BackRepoProjectStruct) CheckoutPhaseOne() (Error error) {

	projectDBArray := make([]ProjectDB, 0)
	_, err := backRepoProject.db.Find(&projectDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	projectInstancesToBeRemovedFromTheStage := make(map[*models.Project]any)
	for key, value := range backRepoProject.stage.Projects {
		projectInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, projectDB := range projectDBArray {
		backRepoProject.CheckoutPhaseOneInstance(&projectDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		project, ok := backRepoProject.Map_ProjectDBID_ProjectPtr[projectDB.ID]
		if ok {
			delete(projectInstancesToBeRemovedFromTheStage, project)
		}
	}

	// remove from stage and back repo's 3 maps all projects that are not in the checkout
	for project := range projectInstancesToBeRemovedFromTheStage {
		project.Unstage(backRepoProject.GetStage())

		// remove instance from the back repo 3 maps
		projectID := backRepoProject.Map_ProjectPtr_ProjectDBID[project]
		delete(backRepoProject.Map_ProjectPtr_ProjectDBID, project)
		delete(backRepoProject.Map_ProjectDBID_ProjectDB, projectID)
		delete(backRepoProject.Map_ProjectDBID_ProjectPtr, projectID)
	}

	return
}

// CheckoutPhaseOneInstance takes a projectDB that has been found in the DB, updates the backRepo and stages the
// models version of the projectDB
func (backRepoProject *BackRepoProjectStruct) CheckoutPhaseOneInstance(projectDB *ProjectDB) (Error error) {

	project, ok := backRepoProject.Map_ProjectDBID_ProjectPtr[projectDB.ID]
	if !ok {
		project = new(models.Project)

		backRepoProject.Map_ProjectDBID_ProjectPtr[projectDB.ID] = project
		backRepoProject.Map_ProjectPtr_ProjectDBID[project] = projectDB.ID

		// append model store with the new element
		project.Name = projectDB.Name_Data.String
		project.Stage(backRepoProject.GetStage())
	}
	projectDB.CopyBasicFieldsToProject(project)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	project.Stage(backRepoProject.GetStage())

	// preserve pointer to projectDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ProjectDBID_ProjectDB)[projectDB hold variable pointers
	projectDB_Data := *projectDB
	preservedPtrToProject := &projectDB_Data
	backRepoProject.Map_ProjectDBID_ProjectDB[projectDB.ID] = preservedPtrToProject

	return
}

// BackRepoProject.CheckoutPhaseTwo Checkouts all staged instances of Project to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoProject *BackRepoProjectStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, projectDB := range backRepoProject.Map_ProjectDBID_ProjectDB {
		backRepoProject.CheckoutPhaseTwoInstance(backRepo, projectDB)
	}
	return
}

// BackRepoProject.CheckoutPhaseTwoInstance Checkouts staged instances of Project to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoProject *BackRepoProjectStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, projectDB *ProjectDB) (Error error) {

	project := backRepoProject.Map_ProjectDBID_ProjectPtr[projectDB.ID]

	projectDB.DecodePointers(backRepo, project)

	return
}

func (projectDB *ProjectDB) DecodePointers(backRepo *BackRepoStruct, project *models.Project) {

	// insertion point for checkout of pointer encoding
	// This loop redeem project.Tasks in the stage from the encode in the back repo
	// It parses all TaskDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	project.Tasks = project.Tasks[:0]
	for _, _Taskid := range projectDB.ProjectPointersEncoding.Tasks {
		project.Tasks = append(project.Tasks, backRepo.BackRepoTask.Map_TaskDBID_TaskPtr[uint(_Taskid)])
	}

	return
}

// CommitProject allows commit of a single project (if already staged)
func (backRepo *BackRepoStruct) CommitProject(project *models.Project) {
	backRepo.BackRepoProject.CommitPhaseOneInstance(project)
	if id, ok := backRepo.BackRepoProject.Map_ProjectPtr_ProjectDBID[project]; ok {
		backRepo.BackRepoProject.CommitPhaseTwoInstance(backRepo, id, project)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitProject allows checkout of a single project (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutProject(project *models.Project) {
	// check if the project is staged
	if _, ok := backRepo.BackRepoProject.Map_ProjectPtr_ProjectDBID[project]; ok {

		if id, ok := backRepo.BackRepoProject.Map_ProjectPtr_ProjectDBID[project]; ok {
			var projectDB ProjectDB
			projectDB.ID = id

			if _, err := backRepo.BackRepoProject.db.First(&projectDB, id); err != nil {
				log.Fatalln("CheckoutProject : Problem with getting object with id:", id)
			}
			backRepo.BackRepoProject.CheckoutPhaseOneInstance(&projectDB)
			backRepo.BackRepoProject.CheckoutPhaseTwoInstance(backRepo, &projectDB)
		}
	}
}

// CopyBasicFieldsFromProject
func (projectDB *ProjectDB) CopyBasicFieldsFromProject(project *models.Project) {
	// insertion point for fields commit

	projectDB.Name_Data.String = project.Name
	projectDB.Name_Data.Valid = true

	projectDB.IsExpanded_Data.Bool = project.IsExpanded
	projectDB.IsExpanded_Data.Valid = true
}

// CopyBasicFieldsFromProject_WOP
func (projectDB *ProjectDB) CopyBasicFieldsFromProject_WOP(project *models.Project_WOP) {
	// insertion point for fields commit

	projectDB.Name_Data.String = project.Name
	projectDB.Name_Data.Valid = true

	projectDB.IsExpanded_Data.Bool = project.IsExpanded
	projectDB.IsExpanded_Data.Valid = true
}

// CopyBasicFieldsFromProjectWOP
func (projectDB *ProjectDB) CopyBasicFieldsFromProjectWOP(project *ProjectWOP) {
	// insertion point for fields commit

	projectDB.Name_Data.String = project.Name
	projectDB.Name_Data.Valid = true

	projectDB.IsExpanded_Data.Bool = project.IsExpanded
	projectDB.IsExpanded_Data.Valid = true
}

// CopyBasicFieldsToProject
func (projectDB *ProjectDB) CopyBasicFieldsToProject(project *models.Project) {
	// insertion point for checkout of basic fields (back repo to stage)
	project.Name = projectDB.Name_Data.String
	project.IsExpanded = projectDB.IsExpanded_Data.Bool
}

// CopyBasicFieldsToProject_WOP
func (projectDB *ProjectDB) CopyBasicFieldsToProject_WOP(project *models.Project_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	project.Name = projectDB.Name_Data.String
	project.IsExpanded = projectDB.IsExpanded_Data.Bool
}

// CopyBasicFieldsToProjectWOP
func (projectDB *ProjectDB) CopyBasicFieldsToProjectWOP(project *ProjectWOP) {
	project.ID = int(projectDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	project.Name = projectDB.Name_Data.String
	project.IsExpanded = projectDB.IsExpanded_Data.Bool
}

// Backup generates a json file from a slice of all ProjectDB instances in the backrepo
func (backRepoProject *BackRepoProjectStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ProjectDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ProjectDB, 0)
	for _, projectDB := range backRepoProject.Map_ProjectDBID_ProjectDB {
		forBackup = append(forBackup, projectDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Project ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Project file", err.Error())
	}
}

// Backup generates a json file from a slice of all ProjectDB instances in the backrepo
func (backRepoProject *BackRepoProjectStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ProjectDB, 0)
	for _, projectDB := range backRepoProject.Map_ProjectDBID_ProjectDB {
		forBackup = append(forBackup, projectDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Project")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Project_Fields, -1)
	for _, projectDB := range forBackup {

		var projectWOP ProjectWOP
		projectDB.CopyBasicFieldsToProjectWOP(&projectWOP)

		row := sh.AddRow()
		row.WriteStruct(&projectWOP, -1)
	}
}

// RestoreXL from the "Project" sheet all ProjectDB instances
func (backRepoProject *BackRepoProjectStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoProjectid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Project"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoProject.rowVisitorProject)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoProject *BackRepoProjectStruct) rowVisitorProject(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var projectWOP ProjectWOP
		row.ReadStruct(&projectWOP)

		// add the unmarshalled struct to the stage
		projectDB := new(ProjectDB)
		projectDB.CopyBasicFieldsFromProjectWOP(&projectWOP)

		projectDB_ID_atBackupTime := projectDB.ID
		projectDB.ID = 0
		_, err := backRepoProject.db.Create(projectDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoProject.Map_ProjectDBID_ProjectDB[projectDB.ID] = projectDB
		BackRepoProjectid_atBckpTime_newID[projectDB_ID_atBackupTime] = projectDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ProjectDB.json" in dirPath that stores an array
// of ProjectDB and stores it in the database
// the map BackRepoProjectid_atBckpTime_newID is updated accordingly
func (backRepoProject *BackRepoProjectStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoProjectid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ProjectDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Project file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ProjectDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ProjectDBID_ProjectDB
	for _, projectDB := range forRestore {

		projectDB_ID_atBackupTime := projectDB.ID
		projectDB.ID = 0
		_, err := backRepoProject.db.Create(projectDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoProject.Map_ProjectDBID_ProjectDB[projectDB.ID] = projectDB
		BackRepoProjectid_atBckpTime_newID[projectDB_ID_atBackupTime] = projectDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Project file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Project>id_atBckpTime_newID
// to compute new index
func (backRepoProject *BackRepoProjectStruct) RestorePhaseTwo() {

	for _, projectDB := range backRepoProject.Map_ProjectDBID_ProjectDB {

		// next line of code is to avert unused variable compilation error
		_ = projectDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoProject.db.Model(projectDB)
		_, err := db.Updates(*projectDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoProject.ResetReversePointers commits all staged instances of Project to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoProject *BackRepoProjectStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, project := range backRepoProject.Map_ProjectDBID_ProjectPtr {
		backRepoProject.ResetReversePointersInstance(backRepo, idx, project)
	}

	return
}

func (backRepoProject *BackRepoProjectStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, project *models.Project) (Error error) {

	// fetch matching projectDB
	if projectDB, ok := backRepoProject.Map_ProjectDBID_ProjectDB[idx]; ok {
		_ = projectDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoProjectid_atBckpTime_newID map[uint]uint
